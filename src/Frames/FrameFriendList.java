/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import Classes.FriendList;
import Classes.*;
import Methods.*;
import Main.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;

/**
 *
 * @author Sebas
 */
public class FrameFriendList extends javax.swing.JFrame {
    MethodsFriendList metFriendList = MethodsFriendList.getInstance();
    UserMethods metUser = UserMethods.getInstance();
    MethodsFriendListUser metFriendListUser = MethodsFriendListUser.getInstance();
    DefaultListModel<String> listModel = new DefaultListModel<>();
    FriendList aux;
    FriendList friend;
    /**
     * Creates new form FriendList
     */
    public FrameFriendList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        createFriendLista = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        searchFriends = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        consultFriendLists = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        addFriend = new javax.swing.JButton();
        Before = new javax.swing.JButton();
        search = new javax.swing.JButton();
        viewFriendListInComun = new javax.swing.JButton();
        printUsers = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        deleteFriend = new javax.swing.JButton();
        myLists = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Buscar2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        Modify = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        deleteFriendList = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Nombre");

        jLabel2.setText("LIsta de amigos");

        jLabel3.setText("Descripción");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        createFriendLista.setText("Crear");
        createFriendLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFriendListaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40)
                        .addComponent(jTextField1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(createFriendLista)
                        .addGap(85, 85, 85))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(createFriendLista)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre de usuario", "Pais", "Ciudad" }));

        searchFriends.setText("Buscar");
        searchFriends.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFriendsActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        consultFriendLists.setText("Consultar listas en las que estoy");
        consultFriendLists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultFriendListsActionPerformed(evt);
            }
        });

        jLabel8.setText("Usuario");

        jLabel11.setText("Listas");

        addFriend.setText("Agregar a la lista");
        addFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendActionPerformed(evt);
            }
        });

        Before.setText("Atrás");
        Before.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeforeActionPerformed(evt);
            }
        });

        search.setText("Buscar listas donde pertenezca");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        viewFriendListInComun.setText("Ver amigos en común");
        viewFriendListInComun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFriendListInComunActionPerformed(evt);
            }
        });

        printUsers.setText("Ver usuarios en la lista");
        printUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printUsersActionPerformed(evt);
            }
        });

        jLabel12.setText("Eliminar a");

        jLabel13.setText("(username)   de la lista");

        deleteFriend.setText("Eliminar");
        deleteFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFriendActionPerformed(evt);
            }
        });

        myLists.setText("Cosnsultar mis listas");
        myLists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myListsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchFriends))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(consultFriendLists)
                                    .addComponent(myLists)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(viewFriendListInComun)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jComboBox2, 0, 150, Short.MAX_VALUE)
                                            .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(addFriend)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(printUsers))
                                            .addComponent(search))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Before))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(21, 21, 21)))
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(deleteFriend)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(myLists)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consultFriendLists)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchFriends))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFriend)
                    .addComponent(printUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewFriendListInComun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteFriend)
                .addGap(25, 25, 25)
                .addComponent(Before)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setText("Nombre de la lista");

        jLabel6.setText("Descripcion");

        Buscar2.setText("Buscar");
        Buscar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar2ActionPerformed(evt);
            }
        });

        jLabel7.setText("Nuevo nombre");

        Modify.setText("Modificar");
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });

        deleteFriendList.setText("Eliminar");
        deleteFriendList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFriendListActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jLabel5.setText("Nueva Descripción");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(jLabel9))
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Buscar2)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jTextField5))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteFriendList)
                            .addComponent(jLabel5))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(Modify)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Buscar2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Modify)
                    .addComponent(deleteFriendList))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Buscar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar2ActionPerformed
        // TODO add your handling code here:
        
        if(jTextField4.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Espacio vacio!");
        }
        else{
            String name = jTextField4.getText();
            friend = metFriendList.searchFriendList(name);
            if(friend!=null){
                jTextArea2.setText(friend.getDescription()); 
            }else{
                JOptionPane.showMessageDialog(null, "No existe");
            }
        }
    }//GEN-LAST:event_Buscar2ActionPerformed

    private void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        // TODO add your handling code here:
        if (friend != null){
            if ((jTextField5.getText().isEmpty()) && (jTextArea3.getText().isEmpty())){
                JOptionPane.showMessageDialog(null, "Campos vacíos");
                return;
            }
                
            if (jTextField5.getText().isEmpty()==false){
                friend.setNameList(jTextField5.getText());//Si hay tiempo arreglar esto
            }
            if (jTextArea3.getText().isEmpty()==false){
                friend.setDescription(jTextArea3.getText());
            }
            metUser.MeterArchivo();
            metFriendList.MeterArchivo();
            JOptionPane.showMessageDialog(null, "Modificado");
        } else
        JOptionPane.showMessageDialog(null, "No existe");
    }//GEN-LAST:event_ModifyActionPerformed

    private void deleteFriendListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFriendListActionPerformed
        // TODO add your handling code here:
        String name = jTextField4.getText();
        if (metFriendList.deleteFriendList(name)==true)
        JOptionPane.showMessageDialog(null, "Lista de amigos "+name+"eliminada correctamente");
        else
        JOptionPane.showMessageDialog(null, "Lista de amigos "+name+"no ha sido eliminada correctamente");
    }//GEN-LAST:event_deleteFriendListActionPerformed

    private void createFriendListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFriendListaActionPerformed
        // TODO add your handling code here:
        String name = jTextField1.getText();
        String description = jTextArea1.getText();
        if((name.isEmpty()) | (description.isEmpty())){
            JOptionPane.showMessageDialog(null, "Espacio vacio.");
        }else{
            String usu = Main.user.userName;
            if (metFriendList.insertLast(name, description, usu)==true){
                JOptionPane.showMessageDialog(null, "Lista "+name+" creada exitosamente");
                metUser.MeterArchivo();
                metFriendList.MeterArchivo();
            }
            else{
                JOptionPane.showMessageDialog(null, "La lista "+name+" NO ha creada exitosamente");
            }
        }
    }//GEN-LAST:event_createFriendListaActionPerformed

    private void searchFriendsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFriendsActionPerformed
        // TODO add your handling code here:
        jComboBox2.removeAllItems(); //se limpia la caja
        jComboBox3.removeAllItems();
        setLists(); //función que llena el combobox
        String tipo = (String) jComboBox1.getSelectedItem();
        if("Nombre de usuario".equals(tipo)){
            listModel.clear();
            String textfield = jTextField2.getText();
            User aux1 = metUser.inicio;
            if(aux1.userName.equals(textfield)){
                listModel.addElement("Nombre: "+aux1.name);
                listModel.addElement("Nombre Usuario: "+aux1.userName);
                listModel.addElement("Pais: "+aux1.country);
                listModel.addElement("Ciudad: "+aux1.city);
                jComboBox2.addItem(aux1.userName);
                }
            while(aux1 != metUser.fin){
                if(aux1.sig.userName.equals(textfield)){
                    listModel.addElement("Nombre: "+aux1.sig.name);
                    listModel.addElement("Nombre Usuario: "+aux1.sig.userName);
                    listModel.addElement("Pais: "+aux1.sig.country);
                    listModel.addElement("Ciudad: "+aux1.sig.city);
                    jComboBox2.addItem(aux1.sig.userName);
                }
               aux1 = aux1.sig;     
            }
        }else if("Ciudad".equals(tipo)){
            listModel.clear();
            String textfield = jTextField2.getText();
            User aux1 = metUser.inicio;
            if(aux1.city.equals(textfield)){
                listModel.addElement("Nombre: "+aux1.name);
                listModel.addElement("Nombre Usuario: "+aux1.userName);
                listModel.addElement("Pais: "+aux1.country);
                listModel.addElement("Ciudad: "+aux1.city);
                jComboBox2.addItem(aux1.userName);
                }
            while(aux1 != metUser.fin){
                if(aux1.sig.city.equals(textfield)){
                    listModel.addElement("Nombre: "+aux1.sig.name);
                    listModel.addElement("Nombre Usuario: "+aux1.sig.userName);
                    listModel.addElement("Pais: "+aux1.sig.country);
                    listModel.addElement("Ciudad: "+aux1.sig.city);
                    jComboBox2.addItem(aux1.sig.userName);
                }
               aux1 = aux1.sig;     
            }
        }else if("Pais".equals(tipo)){
            listModel.clear();
            String textfield = jTextField2.getText();
            User aux1 = metUser.inicio;
            if(aux1.country.equals(textfield)){
                listModel.addElement("Nombre: "+aux1.name);
                listModel.addElement("Nombre Usuario: "+aux1.userName);
                listModel.addElement("Pais: "+aux1.country);
                listModel.addElement("Ciudad: "+aux1.city);
                jComboBox2.addItem(aux1.userName);
                }
            while(aux1 != metUser.fin){
                if(aux1.sig.country.equals(textfield)){
                    listModel.addElement("Nombre: "+aux1.sig.name);
                    listModel.addElement("Nombre Usuario: "+aux1.sig.userName);
                    listModel.addElement("Pais: "+aux1.sig.country);
                    listModel.addElement("Ciudad: "+aux1.sig.city);
                    jComboBox2.addItem(aux1.sig.userName);
                }
               aux1 = aux1.sig;     
            }
        }
            jList1.setModel(listModel);
        
    
    }//GEN-LAST:event_searchFriendsActionPerformed

    private void viewFriendListInComunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewFriendListInComunActionPerformed
        // TODO add your handling code here:
        ArrayList<User> users = new ArrayList<>();      
        User usu = metUser.searchUser((String) jComboBox2.getSelectedItem());
        if (usu==null){
            JOptionPane.showMessageDialog(null, "Precione el botón de buscar para refrescar los combobox!");
            return;
        }
        FriendList aux1=metFriendList.first;
        
        while (aux1!=metFriendList.last){           
            if (aux1.nextUser.identification==Main.user.identification){ //si la lista la creó el usuario actual                
                if (aux1.nextFriendListUser!=null){ //si no tiene amigos mejor ni los compare
                    FriendList aux2=metFriendList.first;
                    while (aux2!=metFriendList.last){
                        FriendListUser sublist1 = aux1.nextFriendListUser;
                        while (sublist1.next!=null){
                            if (aux2.nextUser.equals(usu)){ //si la lista la creó el usuario con el que voy a comparar
                                if (aux2.nextFriendListUser!=null){ //si no tiene amigos mejor ni los compare
                                    FriendListUser sublist2 = aux1.nextFriendListUser;
                                    while (sublist2.next!=null){
                                        if (sublist1.nextUser.equals(sublist2.nextUser)){
                                            if (users.contains(sublist1.nextUser)==false){
                                                users.add(sublist1.nextUser);
                                            }
                                        }
                                        sublist2 = sublist2.next;
                                    }
                                }
                            }
                            sublist1 = sublist1.next;
                        }
                        aux2 = aux2.nextFriend;
                    }
                }
            }
            aux1 = aux1.nextFriend; 
        }
        if (aux1.nextUser.identification==Main.user.identification){ //si la lista la creó el usuario actual                
                if (aux1.nextFriendListUser!=null){ //si no tiene amigos mejor ni los compare
                    FriendList aux2=metFriendList.first;
                    while (aux2!=metFriendList.last){
                        FriendListUser sublist1 = aux1.nextFriendListUser;
                        while (sublist1.next!=null){
                            if (aux2.nextUser.equals(usu)){ //si la lista la creó el usuario con el que voy a comparar
                                if (aux2.nextFriendListUser!=null){ //si no tiene amigos mejor ni los compare
                                    FriendListUser sublist2 = aux1.nextFriendListUser;
                                    while (sublist2.next!=null){
                                        if (sublist1.nextUser.equals(sublist2.nextUser)){
                                            if (users.contains(sublist1.nextUser)==false){
                                                users.add(sublist1.nextUser);
                                            }
                                        }
                                        sublist2 = sublist2.next;
                                    }
                                }
                            }
                            sublist1 = sublist1.next;
                        }
                        aux2 = aux2.nextFriend;
                    }
                }
            }
        listModel.clear();
        for (int i=0; i<users.size(); i++){
            if ((users.get(i).equals(usu)==false) && (users.get(i).equals(Main.user)==false)){
                listModel.addElement("Nombre: "+(users.get(i)).name);
                listModel.addElement("Nombre Usuario: "+(users.get(i)).userName);
                listModel.addElement("Pais: "+(users.get(i)).country);
                listModel.addElement("Ciudad: "+(users.get(i)).city);
                listModel.addElement("\n");
            }
        }
        if (listModel!=null){
            jList1.setModel(listModel); 
        }
    }//GEN-LAST:event_viewFriendListInComunActionPerformed

    private void consultFriendListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultFriendListsActionPerformed
        // TODO add your handling code here:
        printFriendLists();
    }//GEN-LAST:event_consultFriendListsActionPerformed

    private void BeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeforeActionPerformed
        // TODO add your handling code here:
        UserF f = new UserF();
        f.setVisible(true);
        dispose();
    }//GEN-LAST:event_BeforeActionPerformed

    private void addFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendActionPerformed
        // TODO add your handling code here:
        //User usu = metUser.searchUser((String) jComboBox2.getSelectedItem());
        //FriendList fri= metFriendList.searchFriendList((String) jComboBox3.getSelectedItem());
        String name = (String) jComboBox2.getSelectedItem();
        String usu =(String)jComboBox3.getSelectedItem();
        int resp = metFriendListUser.insertLast(usu,name);
        if (resp==0){
            JOptionPane.showMessageDialog(null, "no existe Lista de amigos");
        } else if (resp==1){
            JOptionPane.showMessageDialog(null, "no existe Usuario");
        }else if (resp==2){
            JOptionPane.showMessageDialog(null, "Usuario insertado a la lista: "+(String) jComboBox3.getSelectedItem());
            metUser.MeterArchivo();
            metFriendList.MeterArchivo();
        }
        
    }//GEN-LAST:event_addFriendActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        listModel.clear();
        User  usu = metUser.searchUser((String) jComboBox2.getSelectedItem());
        if (usu==null){
            JOptionPane.showMessageDialog(null, "Precione el botón 'buscar' para cargar la lista de usuarios en el bombobox");
            return;
        }
        FriendList aux1=metFriendList.first;
        
        while(aux1!=metFriendList.last){
            if (aux1.nextUser!=null){
                if (aux1.nextUser.identification==Main.user.identification){ //en caso de ser el creador
                    if (aux1.nextFriendListUser != null) {
                        FriendListUser auxFU = aux1.nextFriendListUser;
                        while (auxFU != null) {
                            if (auxFU.nextUser.equals(usu)){
                                listModel.addElement("LIsta: "+aux1.getNameList());
                            }
                            auxFU = auxFU.next;
                        }
                    }
                }else{
                    if (aux1.nextFriendListUser != null) {
                        FriendListUser auxFU = aux1.nextFriendListUser;
                        while (auxFU != null) {
                            if (auxFU.nextUser.equals(usu)){
                                listModel.addElement("LIsta: "+aux1.getNameList());
                            }
                            auxFU = auxFU.next;
                        }
                    }
                }
            }
            aux1=aux1.nextFriend;
        }
        if (aux1.nextUser!=null){
                if (aux1.nextUser.identification==Main.user.identification){ //en caso de ser el creador
                    if (aux1.nextFriendListUser != null) {
                        FriendListUser auxFU = aux1.nextFriendListUser;
                        while (auxFU != null) {
                            if (auxFU.nextUser.identification==usu.identification){
                                listModel.addElement("LIsta: "+aux1.getNameList());
                            }
                            auxFU = auxFU.next;
                        }
                    }
                }else{
                    if (aux1.nextFriendListUser != null) {
                        FriendListUser auxFU = aux1.nextFriendListUser;
                        while (auxFU != null) {
                            if (auxFU.nextUser.identification==usu.identification){
                                listModel.addElement("LIsta: "+aux1.getNameList());
                            }
                            auxFU = auxFU.next;
                        }
                    }
                }
            }
        jList1.setModel(listModel); 
    }//GEN-LAST:event_searchActionPerformed

    private void printUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printUsersActionPerformed
        // TODO add your handling code here:
        String list = (String)jComboBox3.getSelectedItem();
        if (list==null){
            JOptionPane.showMessageDialog(null, "Seleccione una lista de amigos");
            return;
            }
        FriendList lista = metFriendList.searchFriendList(list);
        printFriendListWithUsers(lista);
    }//GEN-LAST:event_printUsersActionPerformed

    private void deleteFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFriendActionPerformed
        // TODO add your handling code here:
        User usu = metUser.searchUser( jTextField3.getText());
        if (usu==null){
            JOptionPane.showMessageDialog(null, "Usuario no encontrado");
            return;
        }
        String friend1 = (String)jComboBox4.getSelectedItem();
        if (friend1==null){
            JOptionPane.showMessageDialog(null, "Lista no encontrads");
            return;
        }
        if (metFriendListUser.deleteUserFromFriendList(usu, friend1)){
            JOptionPane.showMessageDialog(null, usu.name+" eliminado de la lista "+friend1);
        }else{
            JOptionPane.showMessageDialog(null, usu.name+" NO ha eliminado de la lista "+friend1);
        }
    }//GEN-LAST:event_deleteFriendActionPerformed

    private void myListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myListsActionPerformed
        // TODO add your handling code here:
        FriendList auxList = metFriendList.first;
        listModel.clear();//Limpió el listModel
        while(auxList!=metFriendList.last){
            if (auxList.nextUser!=null){
                if (auxList.nextUser.identification==Main.user.identification){ //si es el creador de la lista
                    listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                    listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                    listModel.addElement("Descripción: "+auxList.getDescription());
                    
                    listModel.addElement("Lista de usuarios**************************");
                    FriendListUser auxFU = auxList.nextFriendListUser;
                    while (auxFU !=null){
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        listModel.addElement("\n");
                        auxFU=auxFU.next;
                }
                    }
            
        }
            auxList=auxList.nextFriend;
        }
        if (auxList.nextUser!=null){
                if (auxList.nextUser.identification==Main.user.identification){ //si es el creador de la lista
                    listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                    listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                    listModel.addElement("Descripción: "+auxList.getDescription());
                    
                    listModel.addElement("Lista de usuarios**************************");
                    FriendListUser auxFU = auxList.nextFriendListUser;
                    while (auxFU !=null){
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        listModel.addElement("\n");
                        auxFU=auxFU.next;
                }
                    }
            
        }
        
        jList1.setModel(listModel); 
    }//GEN-LAST:event_myListsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameFriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameFriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameFriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameFriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameFriendList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Before;
    private javax.swing.JButton Buscar2;
    private javax.swing.JButton Modify;
    private javax.swing.JButton addFriend;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton consultFriendLists;
    private javax.swing.JButton createFriendLista;
    private javax.swing.JButton deleteFriend;
    private javax.swing.JButton deleteFriendList;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JButton myLists;
    private javax.swing.JButton printUsers;
    private javax.swing.JButton search;
    private javax.swing.JButton searchFriends;
    private javax.swing.JButton viewFriendListInComun;
    // End of variables declaration//GEN-END:variables

    public void imprimirNodo(FriendList aux){
        listModel.clear();//Limpió el listModel
        listModel.addElement("Nombre de la lista: "+aux.getNameList());//Lleno el listModel
        listModel.addElement("Descripción: "+aux.getDescription());

        jList1.setModel(listModel);
    }
    public void printFriendLists(){
    FriendList auxList = metFriendList.first;
        listModel.clear();//Limpió el listModel
        while(auxList!=metFriendList.last){
            if (auxList.nextUser!=null){
                if (auxList.nextUser.identification==Main.user.identification){ //si es el creador de la lista
                    listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                    listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                    listModel.addElement("Descripción: "+auxList.getDescription());
                    
                    listModel.addElement("Lista de usuarios**************************");
                    FriendListUser auxFU = auxList.nextFriendListUser;
                    while (auxFU !=null){
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        listModel.addElement("\n");
                        auxFU=auxFU.next;
                }
                }else if (auxList.nextFriendListUser != null) {
                    FriendListUser auxFU1 = auxList.nextFriendListUser;
                    while (auxFU1 != null) {   
                        if (auxFU1.nextUser.identification==Main.user.identification){
                            listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                            listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                            listModel.addElement("Descripción: "+auxList.getDescription());
                            
                            FriendListUser auxFU = auxList.nextFriendListUser;
                            listModel.addElement("Lista de usuarios**************************");
                            while (auxFU !=null){
                                listModel.addElement("Nombre: "+auxFU.nextUser.name);
                                listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                                listModel.addElement("Pais: "+auxFU.nextUser.country);
                                listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                                listModel.addElement("\n");
                                auxFU=auxFU.next;
                }
                        }
                        auxFU1 = auxFU1.next;
                    }
                }
            }
            auxList=auxList.nextFriend;
        }
        if (auxList.nextUser!=null){
                if (auxList.nextUser.identification==Main.user.identification){ //si es el creador de la lista
                    listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                    listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                    listModel.addElement("Descripción: "+auxList.getDescription());
                    
                    listModel.addElement("Lista de usuarios**************************");
                    FriendListUser auxFU = auxList.nextFriendListUser;
                    while (auxFU !=null){
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        listModel.addElement("");
                        auxFU=auxFU.next;
                }
                }else if (auxList.nextFriendListUser != null) {
                    FriendListUser auxFU1 = auxList.nextFriendListUser;
                    while (auxFU1 != null) {   
                        if (auxFU1.nextUser.identification==Main.user.identification){
                            listModel.addElement("+++++++++++++++Lista de Amigos+++++++++++++++");
                            listModel.addElement("Lista: "+auxList.getNameList());//Lleno el listModel
                            listModel.addElement("Descripción: "+auxList.getDescription());
                            
                            FriendListUser auxFU = auxList.nextFriendListUser;
                            listModel.addElement("Lista de usuarios**************************");
                            while (auxFU !=null){
                                listModel.addElement("Nombre: "+auxFU.nextUser.name);
                                listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                                listModel.addElement("Pais: "+auxFU.nextUser.country);
                                listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                                listModel.addElement("");
                                auxFU=auxFU.next;
                }
                        }
                        auxFU1 = auxFU1.next;
                    }
                }
            }
        jList1.setModel(listModel);         
}
    
    public boolean setLists (){
        FriendList aux1 = metFriendList.first;
        if (aux1==null){
            return false;
        }
        while (aux1 != metFriendList.last){
            if (aux1.nextUser!=null){
                if (aux1.nextUser.identification==Main.user.identification){
                    jComboBox3.addItem(aux1.getNameList());
                    jComboBox4.addItem(aux1.getNameList());
                }
            }
            aux1= aux1.nextFriend;
        }
        if (aux1.nextUser.identification==Main.user.identification){
            jComboBox3.addItem(aux1.getNameList());
            jComboBox4.addItem(aux1.getNameList());
        }
        return true;
    }
    public void printFriendListWithUsers(FriendList list){
        FriendList auxFriendList = metFriendList.first;
        listModel.clear();//Limpió el listModel
        while(auxFriendList!=metFriendList.last){
            if (auxFriendList.equals(list)){
                listModel.addElement("+++++++++++++++FriendList+++++++++++++++");
                listModel.addElement(auxFriendList.getNameList());//Lleno el listModel
                listModel.addElement(auxFriendList.getDescription());
                if (auxFriendList.nextFriendListUser != null) {
                    listModel.addElement("Lista Usuarios****************");
                    FriendListUser auxFU = auxFriendList.nextFriendListUser;
                    while (auxFU != null) {
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        auxFU = auxFU.next;
                    }
                }
            }
            auxFriendList=auxFriendList.nextFriend;
        }
        if (auxFriendList.equals(list)){
                listModel.addElement("+++++++++++++++FriendList+++++++++++++++");
                listModel.addElement(auxFriendList.getNameList());//Lleno el listModel
                listModel.addElement(auxFriendList.getDescription());
                if (auxFriendList.nextFriendListUser != null) {
                    listModel.addElement("Lista Usuarios****************");
                    FriendListUser auxFU = auxFriendList.nextFriendListUser;
                    while (auxFU != null) {
                        listModel.addElement("Nombre: "+auxFU.nextUser.name);
                        listModel.addElement("Nombre Usuario: "+auxFU.nextUser.userName);
                        listModel.addElement("Pais: "+auxFU.nextUser.country);
                        listModel.addElement("Ciudad: "+auxFU.nextUser.city);
                        auxFU = auxFU.next;
                    }
                }
            }
        jList1.setModel(listModel); 
        }
           
}
